/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xspi.h"
#include "xstatus.h"

#define SS_0 (0x1)
#define SS_1 (0x2)

XSpi spi0;






XSpi_Stats Stats;	/**< Statistics */
	u32 BaseAddr;		/**< Base address of device (IPIF) */
	int IsReady;		/**< Device is initialized and ready */
	int IsStarted;		/**< Device has been started */
	int HasFifos;		/**< Device is configured with FIFOs or not */
	u32 SlaveOnly;		/**< Device is configured to be slave only */
	u8 NumSlaveBits;	/**< Number of slave selects for this device */
	u8 DataWidth;		/**< Data Transfer Width 8 or 16 or 32 */
	u8 SpiMode;		/**< Standard/Dual/Quad mode */
	u32 SlaveSelectMask;	/**< Mask that matches the number of SS bits */
	u32 SlaveSelectReg;	/**< Slave select register */

	u8 *SendBufferPtr;	/**< Buffer to send  */
	u8 *RecvBufferPtr;	/**< Buffer to receive */
	unsigned int RequestedBytes; /**< Total bytes to transfer (state) */
	unsigned int RemainingBytes; /**< Bytes left to transfer (state) */
	int IsBusy;		/**< A transfer is in progress (state) */

	XSpi_StatusHandler StatusHandler; /**< Status Handler */
	void *StatusRef;	/**< Callback reference for status handler */
	u32 FlashBaseAddr;    	/**< Used in XIP Mode */
	u8 XipMode;


void print_spi_debug(){
	printf("base address: %ld\n", spi0.BaseAddr);
	printf("is ready: %d\n", spi0.IsReady);
	printf("is started: %d\n", spi0.IsStarted);
	printf("has FIFOs: %d\n", spi0.HasFifos);
	printf("slave only: %ld\n", spi0.SlaveOnly);
	printf("number slave select bits: %d\n", spi0.NumSlaveBits);
	printf("data width: %d\n", spi0.DataWidth);
	printf("spi mode: %d\n", spi0.SpiMode);

}

//TODO check LSB/MSB
//TODO check Control Reg again. All items are default low.
XStatus spi_init(){

	XSpi_Initialize(&spi0, XPAR_SPI_0_DEVICE_ID);

	XSpi_IntrGlobalEnable(&spi0); //enable interrupts
	//XSpi_IntrEnable(&spi0, XSP_INTR_RX_OVERRUN_MASK | XSP_INTR_RX_FULL_MASK); //enable receive data overrun interrupt and receiver buffer full interrupt
	XSpi_IntrEnable(&spi0, XSP_INTR_RX_FULL_MASK); //enable receiver buffer full interrupt
	XSpi_SetControlReg(&spi0, XSP_CR_TXFIFO_RESET_MASK | XSP_CR_RXFIFO_RESET_MASK | XSP_CR_MASTER_MODE_MASK | XSP_CR_ENABLE_MASK); // reset FIFOs, spi set to master, system enabled
	XSpi_SetSlaveSelectReg(&spi0, SS_0); // defautl to reading slave select 1
	XSpi_Enable(&spi0); //enable spi

	XStatus status = XSpi_SelfTest(&spi0);
	if (status != XST_SUCCESS) {
		printf("self test failed. Error code %d.\n look up error code in xstatus.h\n", status);
	}
	else{
		printf("self test success\n");
	}

	return status;
}

int main()
{
    init_platform();
    spi_init();

    XSpi_Start(&spi0);

    printf("has FIFOs: %d\n \
    		is ready: %d\n \
    		is started: %d\n ",
    		spi0.HasFifos, spi0.IsReady, spi0.IsStarted);


    return 0;
}
